:root {
    --primary-color: #e10f0f;
}

body {
    font-family: sans-serif;

    /* background-image: linear-gradient(transparent, red), url(imagens/tile.png);
    background-attachment: fixed, scroll; 
    Nesse caso o background-attachment fixed vale apenas pro linear grandient enquanto o scroll vale para a URL, ou seja, as virgulas são as ordens seguidas tanto no background-image como no background-attachment*/
    background-image: linear-gradient(180deg, rgb(255, 0, 0), rgb(0, 0, 255)), url(imagens/tile.png);

    /* na frente da cor do linear-gradiente você pode colocar porcetagem onde 50% é o valor onde as duas cores ficam 100% sem se mesclar, além disse você pode inderessar a posição da cor, como exemplo, "to top right" assim ele vai ficar transversal (PODE SER USADO TAMBÉM VALORES DE ANGULOS COMO O "DEG"*/
    background-attachment: fixed, scroll;

    background-blend-mode: color;
}

.cores {
    --color: color-mix(in srgb, var(--primary-color), transparent 20%);
    width: 80%;
    border: 9px dashed var(--color);
    margin: 20px auto;
    padding: 26px;
    /* Color-mix não funciona direto no border, tem que criar uma variavel usando o codigo "color-mix: in srgb,  (cor+%), (cor+%) e depois colocar a variavel no border como se fosse uma cor. (a porcetagem não é obrigatoria) */
}

.cores p {
    margin: 0;
}

section {
    counter-reset: contador;
    /* Aqui eu selecionei a section para fazer o contador, ou seja, ele vai somar começando pelo 1 a cada div que tiver dentro da section */

    /* detalhe o "CONTADOR" é um nome ficticio que eu dei para acessar na div e no ::before */
}

.cores {
    counter-increment: contador;
    /* aqui ele está incrementando +1 a cada div */
}

.cores::before {
    content: "[ " counter(contador) " ]";
    display: inline-block;
    margin-bottom: 16px;
    font-weight: bold;
    /* Aqui eu acessei a função atraves do content e atraves do nome ficticio que eu coloquei no counter-reset. (pode ser usado sem os aspas e o colchetes) */
}

.cores:nth-of-type(2) {
    background-color: red;
    background-clip: content-box;
    /* tem 3 valores do background-clip, onde border-box é a default, padding-box que vai englobar até antes do limite da borda e o content-box que vai englobar apenas a parte que diz respeito ao conteudo */
}

.cores:nth-of-type(3) {
    background-color: hsl(100deg 100% 80% / .5);
    box-shadow: 10px 10px 6px hsl(100deg, 100%, 50%) inset;
}

.cores:nth-of-type(3):hover {
    background-color: hsl(100deg, 100%, 40%);
}

.cores:nth-of-type(4) {
    background-image: linear-gradient(70deg, blue, transparent),
        linear-gradient(to top, red, transparent);
    background-clip: content-box, padding-box;
}

.cores:nth-of-type(5) {
    background-image: radial-gradient(blue 30%, color-mix(in srgb, red, transparent), green 50%, yellow);
}

.cores:nth-of-type(6) {
    background-image: radial-gradient(circle, blue 30%, color-mix(in srgb, red, transparent), green 50%, yellow);
}

.cores:nth-of-type(7) {
    background-image: radial-gradient(circle, blue, color-mix(in srgb, red, red), green, yellow);
}

.cores:nth-of-type(8) {
    /* background-image: radial-gradient(circle at top left, blue, red) */
    background-image: radial-gradient(circle at 20% 50%, blue, red 20%)
}

.cores:nth-of-type(9) {
    /* background-image: radial-gradient(ellipse at top left, blue, red) */
    /* background-image: radial-gradient(ellipse at 20% 50%, blue, red 20%) */
    background-image: radial-gradient(at 20% 50%, blue, red 20%)
}

.cores:nth-of-type(10) {
    background-image: radial-gradient(closest-corner at 50px 20px, blue, red)
}

.cores:nth-of-type(11) {
    background-image: radial-gradient(farthest-corner at 50px 20px, blue, red)
}

.cores:nth-of-type(12) {
    background-image:
        radial-gradient(closest-side at 50px 20px, blue, red)
}

.cores:nth-of-type(13) {
    background-image:
        radial-gradient(farthest-side at 50px 20px, blue, red)
}

.cores:nth-of-type(14) {
    background-image:
        radial-gradient(circle farthest-side at 50px 20px, blue, red)
}

.cores:nth-of-type(15) {
    background-image:
        radial-gradient(circle farthest-side at 50px 20px, #00f8, #f008),
        radial-gradient(circle farthest-corner at bottom right, yellow, transparent)
}

.cores:nth-of-type(16) {
    background-image:
        radial-gradient(at top, #00f8, #f008),
        radial-gradient(at bottom, yellow, transparent)
}

.cores:nth-of-type(17) {
    background-image:
        conic-gradient(from 45deg, red 50%, blue, green, red);
}

.cores:nth-of-type(18) {
    background-image:
        conic-gradient(#f00, #ff0, #0f0, #0ff, #00f, #f0f, #f00);
    transition: filter 10s linear;
    aspect-ratio: 1;
}

.cores:nth-of-type(18):hover {
    filter: hue-rotate(3600deg);
}

.cores:nth-of-type(19) {
    background-image:
        repeating-linear-gradient(to top right, white 0, white 5px, black 5px, black 10px);
}

.cores:nth-of-type(20) {
    background-image:
        repeating-radial-gradient(white 0, white 5px, black 5px, black 10px);
}

.cores:nth-of-type(21) {
    background-image:
        repeating-conic-gradient(white 0, white 5deg, black 5deg, black 10deg);
}

.cores:nth-of-type(22) {
    background-image:
        repeating-conic-gradient(transparent 0, transparent 5deg, black 5deg, black 10deg),
        repeating-radial-gradient(red 0%, transparent, blue 20%);
    background-attachment: fixed, scroll;
}

.cores:nth-of-type(23) {
    background-image:
        repeating-radial-gradient(red 0, transparent, blue 20%),
        repeating-linear-gradient(red, blue);
    background-attachment: scroll, fixed;
}

.cores:nth-of-type(24) {
    box-shadow: 10px 10px 6px rgba(0, 0, 0, .8);
}

.cores:nth-of-type(25) {
    filter: drop-shadow(3px 3px 2px rgba(0, 0, 0, .8));
}

.cores:nth-of-type(26) {
    background-image:
        linear-gradient(to top right, transparent 50%, red 50%);
    box-shadow: 10px 10px 2px rgba(0, 0, 0, .8);
}

.cores:nth-of-type(27) {
    background-image:
        linear-gradient(to top right, transparent 50%, red 50%);
    filter: drop-shadow(3px 3px 2px rgba(0, 0, 0, .8));
}
